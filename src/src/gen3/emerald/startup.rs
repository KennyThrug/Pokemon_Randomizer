use crate::src::gen3::evolution_changes::setup_evolution_fixes;
use crate::src::pokemon::read_all_pokemon;
use crate::src::settings;
use crate::src::gen3::wild_pokemon;
use crate::src::gen3::trainers;
use rand::{Rng, rngs::StdRng, SeedableRng};
//File that contains the functions that will be called by the launcher

//Randomizes every pokemon in the game according to json file
//filename should point to a Json file generated by the launcher with all the settings & Seed
pub fn randomize_pokemon(){
    println!("Ts");
    let mut settings = create_sample_settings();
    let pkmn_data = read_all_pokemon();
    wild_pokemon::randomize_wild_pokemon(&mut settings,&pkmn_data);
    trainers::shuffle_trainers(&mut settings,&pkmn_data);
    setup_evolution_fixes(&mut settings)
}

pub fn build_rom(){

}
fn create_sample_settings() -> settings::Settings{
    let seed_string = "Default".to_string();
    let bytes: [u8;32] = settings::convert_string_to_seed(seed_string); //HERE
    let mut ret : settings::Settings = settings::Settings{
        seed: "Default".to_string(),
        seed_val: StdRng::from_seed(bytes),
        randomize_wild_pokemon: true,
        allow_pokemon_past_generation: true,
        allow_legends_in_wild_pool: false,
        allow_megas_in_wild_pool: true,
        randomize_trainer_pokemon: true,
        trainers_scale: true,
        allow_trainer_legendaries: settings::AllowLegendaries::NoLegends,
        allow_leader_legendaries: settings::AllowLegendaries::AceLegend,
        gym_type: settings::GymType::RandomType,
        recieve_pokemon_reward_gym: true,
        randomize_gym_locations: settings::GymLocationRandomization::RandomizeCompletely,
        add_rare_candy: 70,
        add_held_items: true,
        add_held_items_later_gens: true,
        items_from_trainers: true,
        important_items_only_from_trainers: true,
        add_pokeballs: 10,
        allow_pokeballs_from_store: false,
        make_balls_reusable: true,
        allow_healing_items: true,
        randomize_hidden_items: false,
        gym_leader_keys: true,
        allow_hm_use: true
    };
    return ret; 
}