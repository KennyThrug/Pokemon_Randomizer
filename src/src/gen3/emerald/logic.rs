use crate::src::settings;

pub enum Locations{
    AbandonedShip,
    AncientTomb,
    AquaHideout,
    BirthIsland,
    DesertUnderpass,
    DewfordGym,
    Dewford,
    EverGrandCity,
    FallarborTown,
    FarawayIsland,
    FieryPath,
    Fortree,
    FortreeGym,
    GraniteCave,
    IslandCave,
    JaggedPass,
    Lavaridge,
    LavaridgeGym,
    Lillycove,
    MagmaHideout,
    MarineCave,
    MauvilleCity,
    MauvilleGym,
    MeteorFalls,
    Mossdeep,
    MossdeepGym,
    MtChimney,
    MtPyer,
    NavelRock,
    NewMauville,
    OldaleTown,
    Pacifidlog,
    PetalburgGym,
    PetalburgWoods,
    Route102,
    Route103,
    Route104,
    Route105,
    Route106,
    Route107,
    Route108,
    Route109,
    Route110,
    TrickHouse,
    Route111,
    Route112,
    Route113,
    Route114,
    Route115,
    Route116,
    Route117,
    Route118,
    Route119,
    WeatherInstitute,
    Route120,
    Route121,
    SafariZone,
    Route123,
    Route124,
    Route125,
    Route126,
    Route127,
    Route128,
    Route129,
    Route130,
    Route131,
    Route132,
    Route133,
    Route134,
    RustboroCity,
    RustboroCityGym,
    RusturfTunnel,
    ScorchedSlab,
    SeafloorCavern,
    Slateport,
    Sootopolis,
    SootopolisGym,
    SSTidal,
    Verdanturf,
    VictoryRoad,
    ShoalCave,
    ArtisanCave
}

pub fn convert_to_location(location: String) -> Locations{
    if location.as_str() == "Abandoned Ship"{
        println!("Abandoned Ship")
    }
    return match(location.as_str()){
        "Abandoned Ship" =>  Locations::AbandonedShip,
        "Ancient Tomb" =>  Locations::AncientTomb,
        "Aqua Hideout" =>  Locations::AquaHideout,
        "Birth Island" =>  Locations::BirthIsland,
        "Desert Underpass" =>  Locations::DesertUnderpass,
        "Dewford Gym" =>  Locations::DewfordGym,
        "Dewford" =>  Locations::Dewford,
        "EverGrand City" =>  Locations::EverGrandCity,
        "Fallarbor Town" =>  Locations::FallarborTown,
        "Faraway Island" =>  Locations::FarawayIsland,
        "Fiery Path" =>  Locations::FieryPath,
        "Fortree" =>  Locations::Fortree,
        "Fortree Gym" =>  Locations::FortreeGym,
        "Granite Cave" =>  Locations::GraniteCave,
        "Island Cave" =>  Locations::IslandCave,
        "Jagged Pass" =>  Locations::JaggedPass,
        "Lavaridge" =>  Locations::Lavaridge,
        "Lavaridge Gym" =>  Locations::LavaridgeGym,
        "Lillycove" =>  Locations::Lillycove,
        "Magma Hideout" =>  Locations::MagmaHideout,
        "Marine Cave" =>  Locations::MarineCave,
        "Mauville City" =>  Locations::MauvilleCity,
        "Mauville Gym" =>  Locations::MauvilleGym,
        "Meteor Falls" =>  Locations::MeteorFalls,
        "Mossdeep" =>  Locations::Mossdeep,
        "Mossdeep Gym" =>  Locations::MossdeepGym,
        "Mt Chimney" =>  Locations::MtChimney,
        "Mt Pyer" =>  Locations::MtPyer,
        "Navel Rock" =>  Locations::NavelRock,
        "New Mauville" =>  Locations::NewMauville,
        "Oldale Town" =>  Locations::OldaleTown,
        "Pacifidlog" =>  Locations::Pacifidlog,
        "Petalburg Gym" =>  Locations::PetalburgGym,
        "Petalburg Woods" =>  Locations::PetalburgWoods,
        "Route 102" =>  Locations::Route102,
        "Route 103" =>  Locations::Route103,
        "Route 104" =>  Locations::Route104,
        "Route 105" =>  Locations::Route105,
        "Route 106" =>  Locations::Route106,
        "Route 107" =>  Locations::Route107,
        "Route 108" =>  Locations::Route108,
        "Route 109" =>  Locations::Route109,
        "Route 110" =>  Locations::Route110,
        "Trick House" =>  Locations::TrickHouse,
        "Route 111" =>  Locations::Route111,
        "Route 112" =>  Locations::Route112,
        "Route 113" =>  Locations::Route113,
        "Route 114" =>  Locations::Route114,
        "Route 115" =>  Locations::Route115,
        "Route 116" =>  Locations::Route116,
        "Route 117" =>  Locations::Route117,
        "Route 118" =>  Locations::Route118,
        "Route 119" =>  Locations::Route119,
        "Weather Institute" => Locations::WeatherInstitute,
        "Route 120" =>  Locations::Route120,
        "Route 121" =>  Locations::Route121,
        "Safari Zone" =>  Locations::SafariZone,
        "Route 123" =>  Locations::Route123,
        "Route 124" =>  Locations::Route124,
        "Route 125" =>  Locations::Route125,
        "Route 126" =>  Locations::Route126,
        "Route 127" =>  Locations::Route127,
        "Route 128" =>  Locations::Route128,
        "Route 129" =>  Locations::Route129,
        "Route 130" =>  Locations::Route130,
        "Route 131" =>  Locations::Route131,
        "Route 132" =>  Locations::Route132,
        "Route 133" =>  Locations::Route133,
        "Route 134" =>  Locations::Route134,
        "Rustboro City" =>  Locations::RustboroCity,
        "Rustboro City Gym" =>  Locations::RustboroCityGym,
        "Rusturf Tunnel" =>  Locations::RusturfTunnel,
        "Scorched Slab" =>  Locations::ScorchedSlab,
        "Seafloor Cavern" =>  Locations::SeafloorCavern,
        "Slateport" =>  Locations::Slateport,
        "Sootopolis" =>  Locations::Sootopolis,
        "Sootopolis Gym" =>  Locations::SootopolisGym,
        "SS Tidal" =>  Locations::SSTidal,
        "Verdanturf" =>  Locations::Verdanturf,
        "Victory Road" =>  Locations::VictoryRoad,
        "Shoal Cave" =>  Locations::ShoalCave,
        "Artisan Cave" =>  Locations::ArtisanCave,
        &_  => Locations::VictoryRoad
    }
}

//Checks if the item can go in this slot, returns false if it cannot, true if it can
pub fn check_logic(settings: &mut settings::Settings,item_name: String, location_name: u8, prereqs: Vec<String>) -> bool{
    for cur_item in prereqs.iter(){
        if *cur_item == item_name{
            println!("Prereqs");
            return false;
        }
    }
    return check_area_for_item(Vec::new(),item_name,location_name,Vec::new());
}

fn check_area_for_item(previous_areas: Vec<Locations>,item_name : String,location_name: u8,requirements: Vec<String>) -> bool{
    // println!("{} , {}",item_name,location_name.to_string());
    if item_name == "ITEM_HM02" && location_name != Locations::AbandonedShip as u8{
        // println!("Route 114 : {}, {}",(Locations::AbandonedShip as u8).to_string(),location_name.to_string());
        // println!("Mastah");
        return false;
    }
    return true;
}